name = "Approach"
tools_version = "5.7.1"
default_localization = "en"

# Platforms

[platforms.iOS]
supported = [ ".v16" ]

# Features

[features.AlleyEditor]
features = [ "LaneEditor" ]
dataProviders = [ "Lanes" ]
services = [ "Persistence" ]
libraries = [ "BaseForm", "Extensions", "SharedModelsViews" ]

[features.AlleysList]
features = [ "AlleyEditor" ]
dataProviders = [ "Alleys" ]
services = [ "FeatureFlags" ]
libraries = [ "ResourceList" ]

[features.App]
features = [ "AlleysList", "BowlersList", "GearList", "Settings" ]
services = [ "Analytics" ]

[features.AvatarEditor]
services = [ "Avatar" ]
libraries = [ "SharedModelsViews" ]

[features.BowlerEditor]
features = [ "AvatarEditor" ]
services = [ "Persistence", "FeatureFlags" ]
libraries = [ "BaseForm" ]

[features.BowlersList]
features = [ "BowlerEditor", "LeaguesList", "StatisticsWidgets" ]
repositories = [ "Bowlers" ]

[features.FeatureFlagsList]
services = [ "FeatureFlags" ]
libraries = [ "Strings" ]

[features.GamesEditor]
features = [ "ScoreSheet" ]
dataProviders = [ "Frames" ]
libraries = [ "Extensions", "SwiftUIExtensions" ]

[features.GamesList]
features = [ "GamesEditor" ]
dataProviders = [ "Bowlers", "Games" ]
libraries = [ "DateTime", "ResourceList" ]

[features.GearEditor]
dataProviders = [ "Bowlers" ]
services = [ "Avatar", "FeatureFlags", "Persistence" ]
libraries = [ "BaseForm", "ResourcePicker", "SharedModelsViews" ]

[features.GearList]
features = [ "GearEditor" ]
dataProviders = [ "Gear" ]
services = [ "RecentlyUsed" ]
libraries = [ "ResourceList", "SortOrder" ]

[features.LaneEditor]
libraries = [ "SharedModels", "SwiftUIExtensions", "Views" ]

[features.LeagueEditor]
dataProviders = [ "Alleys" ]
services = [ "Persistence" ]
libraries = [ "BaseForm", "ResourcePicker", "SharedModelsViews"]

[features.LeaguesList]
features = [ "LeagueEditor", "SeriesList" ]
dataProviders = [ "Leagues" ]
services = [ "RecentlyUsed" ]
libraries = [ "SortOrder" ]

[features.OpponentEditor]
services = [ "Persistence" ]
libraries = [ "BaseForm" ]

[features.OpponentsList]
features = [ "OpponentEditor" ]
dataProviders = [ "Opponents" ]
libraries = [ "ResourceList", "SharedModelsViews", "SortOrder" ]

[features.ScoreSheet]
libraries = [ "SharedModels", "Views" ]

[features.SeriesEditor]
dataProviders = [ "Alleys", "Lanes" ]
services = [ "Persistence" ]
libraries = [ "BaseForm", "ResourcePicker", "SharedModelsViews" ]

[features.SeriesList]
features = [ "GamesList", "SeriesEditor" ]
dataProviders = [ "Series" ]
services = [ "FeatureFlags" ]

[features.Settings]
features = [ "FeatureFlagsList", "OpponentsList" ]
libraries = [ "Constants", "FoundationExtensions" ]

[features.StatisticsWidgets]
libraries = [ "Assets", "Strings" ]

# Repositories

[repositories.Bowlers]
services = [ "Database", "RecentlyUsed" ]
libraries = [ "DatabaseModels" ]
[repositories.Bowlers.interface]
libraries = [ "Models" ]
[repositories.Bowlers.tests]
services = [ "Database" ]

# Data Providers

[dataProviders.Alleys]
services = [ "Persistence", "RecentlyUsed" ]
libraries = [ "Sorting" ]
dependencies = [ "AsyncAlgorithms" ]

[dataProviders.Bowlers]
services = [ "Persistence", "RecentlyUsed" ]
libraries = [ "Sorting" ]
dependencies = [ "AsyncAlgorithms" ]

[dataProviders.Frames]
services = [ "Persistence" ]

[dataProviders.Games]
services = [ "Persistence" ]

[dataProviders.Gear]
services = [ "Persistence", "RecentlyUsed" ]
libraries = [ "Sorting" ]
dependencies = [ "AsyncAlgorithms" ]

[dataProviders.Lanes]
services = [ "Persistence" ]

[dataProviders.Leagues]
services = [ "Persistence", "RecentlyUsed" ]
libraries = [ "Sorting" ]
dependencies = [ "AsyncAlgorithms" ]

[dataProviders.Opponents]
services = [ "Persistence", "RecentlyUsed" ]
libraries = [ "Sorting" ]
dependencies = [ "AsyncAlgorithms" ]

[dataProviders.Series]
services = [ "Persistence" ]

# Services

[services.AddressLookup]
[services.AddressLookup.interface]
dependencies = [ "XCTestDynamicOverlay" ]

[services.Analytics]
libraries = [ "Constants" ]
dependencies = [ "TelemetryClient" ]

[services.Avatar]
[services.Avatar.interface]
libraries = [ "Assets", "SharedModels" ]

[services.Database]
services = [ "FileManager" ]
[services.Database.interface]
suitable_for_dependents_matching = "\\w+Repository$"
dependencies = [ "GRDB" ]

[services.FeatureFlags]
services = [ "Preference" ]
[services.FeatureFlags.interface]
libraries = [ "FeatureFlags" ]

[services.FileManager]

[services.Persistence]
services = [ "FileManager" ]
libraries = [ "SharedModelsPersistable" ]
[services.Persistence.interface]
libraries = [ "SharedModelsFetchable" ]

[services.Preference]

[services.RecentlyUsed]
services = [ "Preference" ]

[services.Scoring]
services = [ "Persistence" ]
[services.Scoring.interface]
libraries = [ "SharedModels" ]

# Libraries

[libraries.Assets]
skip_tests = true

[libraries.BaseForm]
libraries = [ "FeatureAction", "Views" ]
dependencies = [ "Dependencies" ]

[libraries.Constants]
skip_tests = true
libraries = [ "Strings" ]

[libraries.DatabaseModels]
skip_tests = true
libraries = [ "Extensions", "Models" ]
dependencies = [ "GRDB" ]

[libraries.DateTime]

[libraries.Equatable]

[libraries.Extensions]

[libraries.FeatureAction]
skip_tests = true
dependencies = [ "ComposableArchitecture" ]

[libraries.FeatureFlags]

[libraries.FoundationExtensions]
skip_tests = true

[libraries.Models]
skip_tests = true

[libraries.Repository]
libraries = [ "Sorting" ]
dependencies = [ "AsyncAlgorithms" ]

[libraries.ResourceList]
libraries = [ "Equatable", "FeatureAction", "Views" ]

[libraries.ResourcePicker]
libraries = [ "FeatureAction", "Views" ]

[libraries.SharedModels]
libraries = [ "Strings" ]

[libraries.SharedModelsFetchable]
libraries = [ "SharedModels" ]

[libraries.SharedModelsMocks]
suitable_for_dependents_matching = "\\w+Tests$"
libraries = [ "SharedModels" ]

[libraries.SharedModelsPersistable]
libraries = [ "Extensions", "SharedModels" ]
dependencies = [ "Dependencies", "GRDB" ]

[libraries.SharedModelsViews]
libraries = [ "DateTime", "SharedModels", "Views" ]

[libraries.Sorting]

[libraries.SortOrder]
libraries = [ "FeatureAction", "SwiftUIExtensions", "Views" ]

[libraries.Strings]
skip_tests = true

[libraries.SwiftUIExtensions]

[libraries.Views]
libraries = [ "Assets", "Strings" ]
dependencies = [ "ComposableArchitecture" ]

# External Dependencies

[dependencies.AsyncAlgorithms]
url = "https://github.com/apple/swift-async-algorithms.git"
from = "0.0.4"

[dependencies.GRDB]
url = "https://github.com/groue/GRDB.swift.git"
from = "6.6.0"

[dependencies.ComposableArchitecture]
url = "https://github.com/pointfreeco/swift-composable-architecture.git"
revision = "132cb3bae2d333c75ff2c952086d1dcd53ba392e"

[dependencies.Dependencies]
url = "https://github.com/pointfreeco/swift-dependencies.git"
from = "0.1.2"

[dependencies.SnapshotTesting]
suitable_for_dependents_matching = "\\w+Tests$"
url = "https://github.com/pointfreeco/swift-snapshot-testing.git"
from = "1.10.0"

[dependencies.TelemetryClient]
url = "https://github.com/TelemetryDeck/SwiftClient.git"
from = "1.4.2"

[dependencies.XCTestDynamicOverlay]
url = "https://github.com/pointfreeco/xctest-dynamic-overlay.git"
from = "0.8.4"

# Default Imports

[defaults.features]
libraries = [ "FeatureAction" ]
dependencies = [ "ComposableArchitecture" ]

[defaults.features.tests]
libraries = [ "SharedModelsMocks" ]
dependencies = [ "SnapshotTesting" ]

[defaults.dataProviders.interface]
libraries = [ "SharedModelsFetchable" ]
dependencies = [ "Dependencies" ]

[defaults.dataProviders.tests]
libraries = [ "SharedModelsMocks" ]
dependencies = [ "SnapshotTesting" ]

[defaults.repositories]
libraries = [ "Repository" ]

[defaults.repositories.interface]
dependencies = [ "Dependencies" ]

[defaults.repositories.tests]
dependencies = [ "SnapshotTesting" ]

[defaults.services.interface]
dependencies = [ "Dependencies" ]

[defaults.services.tests]
libraries = [ "SharedModelsMocks" ]
dependencies = [ "SnapshotTesting" ]

[defaults.libraries.tests]
libraries = [ "SharedModelsMocks" ]
dependencies = [ "SnapshotTesting" ]
